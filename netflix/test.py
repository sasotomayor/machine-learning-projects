import numpy as np
import em
import common
import naive_em


X = np.loadtxt("netflix_incomplete.txt")
X_gold = np.loadtxt('netflix_complete.txt')


mixture_k12_0, post_k12_0 = common.init(X, 12, 0)
pred_0 = em.fill_matrix(X, mixture_k12_0)
print('Seed 0: {}'.format(common.rmse(X_gold, pred_0)))

mixture_k12_1, post_k12_1 = common.init(X, 12, 1)
pred_1 = em.fill_matrix(X, mixture_k12_1)
print('Seed 1: {}'.format(common.rmse(X_gold, pred_1)))

mixture_k12_2, post_k12_2 = common.init(X, 12, 2)
pred_2 = em.fill_matrix(X, mixture_k12_2)
print('Seed 2: {}'.format(common.rmse(X_gold, pred_2)))

mixture_k12_3, post_k12_3 = common.init(X, 12, 3)
pred_3 = em.fill_matrix(X, mixture_k12_3)
print('Seed 3: {}'.format(common.rmse(X_gold, pred_3)))

mixture_k12_4, post_k12_4 = common.init(X, 12, 4)
pred_4 = em.fill_matrix(X, mixture_k12_4)
print('Seed 4: {}'.format(common.rmse(X_gold, pred_4)))













'''
#results = np.loadtxt("test_solutions.txt")



mixture_k1, post_k1 = common.init(X, 1, 0)
post_k1, ll_k1 = em.estep(X, mixture_k1)
print(ll_k1)

best_ll_k1 = -np.inf
best_ll_k12 = -np.inf

for seed in range(5):
    print(seed)
    mixture_k1, post_k1 = common.init(X, 1, seed)
    print('pass')
    post_k1, ll_k1 = em.estep(X, mixture_k1)
    print(ll_k1)
    if ll_k1 > best_ll_k1: best_ll_k1 = ll_k1

print(best_ll_k1)
'''

#for seed in range(5):
#    mixture_k12, post_k12 = common.init(X, 12, seed)
#    post_k12, ll_k12 = em.estep(X, mixture_k12)
#    print(ll_k12)
#    if ll_k12 > best_ll_k12: best_ll_k12 = ll_k12

#print(best_ll_k12)




'''
X = np.array([[0.85794562, 0.84725174],
 [0.6235637 , 0.38438171],
 [0.29753461, 0.05671298],
 [0.        , 0.47766512],
 [0.        , 0.        ],
 [0.3927848 , 0.        ],
 [0.        , 0.64817187],
 [0.36824154, 0.        ],
 [0.        , 0.87008726],
 [0.47360805, 0.        ],
 [0.        , 0.        ],
 [0.        , 0.        ],
 [0.53737323, 0.75861562],
 [0.10590761, 0.        ],
 [0.18633234, 0.        ]])

mixture, post1 = common.init(X, 6)

post = np.array([[0.15765074, 0.20544344, 0.17314824, 0.15652173, 0.12169798, 0.18553787],
 [0.1094766,  0.22310587, 0.24109142, 0.0959303,  0.19807563, 0.13232018],
 [0.22679645, 0.36955206, 0.02836173, 0.03478709, 0.00807236, 0.33243031],
 [0.16670188, 0.18637975, 0.20964608, 0.17120102, 0.09886116, 0.16721011],
 [0.04250305, 0.22996176, 0.05151538, 0.33947585, 0.18753121, 0.14901275],
 [0.09799086, 0.28677458, 0.16895715, 0.21054678, 0.0069597,  0.22877093],
 [0.16764519, 0.16897033, 0.25848053, 0.18674186, 0.09846462, 0.11969746],
 [0.28655211, 0.02473762, 0.27387452, 0.27546459, 0.08641467, 0.05295649],
 [0.11353057, 0.13090863, 0.20522811, 0.15786368, 0.35574052, 0.03672849],
 [0.10510461, 0.08116927, 0.3286373,  0.12745369, 0.23464272, 0.12299241],
 [0.09757735, 0.06774952, 0.40286261, 0.08481828, 0.1206645,  0.22632773],
 [0.24899344, 0.02944918, 0.25413459, 0.02914503, 0.29614373, 0.14213403],
 [0.35350682, 0.21890411, 0.26755234, 0.01418274, 0.10235276, 0.04350123],
 [0.15555757, 0.06236572, 0.16703133, 0.21760554, 0.03369562, 0.36374421],
 [0.1917808,  0.08982788, 0.17710673, 0.03179658, 0.19494387, 0.31454414]])




print(em.fill_matrix(X, mixture))

from scipy.stats import multivariate_normal

x = [0, 0, 0, 0, 0, 0, 0]
x[0] = multivariate_normal.pdf(0, mean=0, cov=0.09388066)*0.156423
x[1] = multivariate_normal.pdf(0, mean=0, cov=0.07634066)*0.17998975
x[2] = multivariate_normal.pdf(0, mean=0, cov=0.0844513)*0.13446359
x[3] = multivariate_normal.pdf(0, mean=0, cov=0.1904222)*0.10615833
x[4] = multivariate_normal.pdf(0, mean=0, cov=0.09388066)*0.13084721
x[5] = multivariate_normal.pdf(0, mean=0, cov=0.08768063)*0.1347008
x[6] = multivariate_normal.pdf(0, mean=0, cov=0.09388066)*0.15741732

for i in x:
    print(i/sum(x))
        



X = np.loadtxt('toy_data.txt')
mixture, post = common.init(X, 3, 0)
print(mixture)
print(common.bic(X, mixture, 1))
#print(naive_em.run(X, mixture, post))



post = np.array([[0.60764813,0.06069237,0.23172983, 0.09992967], [0.21088037, 0.00998501, 0.56162,0.21751462],
 [0.60947439, 0.04217135, 0.22562023, 0.12273402],
 [0.51053847, 0.3355993,  0.0773787,  0.07648352],
 [0.51902414, 0.01825294, 0.09570416, 0.36701876],
 [0.76936232, 0.08569398, 0.05889886, 0.08604483],
 [0.8011682,  0.03251953, 0.05535243, 0.11095985],
 [0.45121202, 0.01452499, 0.35397029, 0.18029271],
 [0.68566452, 0.03184066, 0.04996369, 0.23253113],
 [0.1540114,  0.760829,   0.01417121, 0.0709884 ],
 [0.78457824, 0.02541679, 0.05571051, 0.13429446]])

#-11.408262

X= np.array([[0.85794562, 0.84725174],
 [0.6235637,  0.38438171],
 [0.29753461, 0.05671298],
 [0.27265629, 0.47766512],
 [0.81216873, 0.47997717],
 [0.3927848,  0.83607876],
 [0.33739616, 0.64817187],
 [0.36824154, 0.95715516],
 [0.14035078, 0.87008726],
 [0.47360805, 0.80091075],
 [0.52047748, 0.67887953],
 [0.72063265, 0.58201979],
 [0.53737323, 0.75861562],
 [0.10590761, 0.47360042],
 [0.18633234, 0.73691818]])

post = np.array([[0.15765074, 0.20544344, 0.17314824, 0.15652173, 0.12169798, 0.18553787],
 [0.1094766,  0.22310587, 0.24109142 ,0.0959303 , 0.19807563, 0.13232018],
 [0.22679645, 0.36955206, 0.02836173 ,0.03478709, 0.00807236, 0.33243031],
 [0.16670188, 0.18637975, 0.20964608 ,0.17120102, 0.09886116, 0.16721011],
 [0.04250305, 0.22996176, 0.05151538 ,0.33947585, 0.18753121, 0.14901275],
 [0.09799086, 0.28677458, 0.16895715 ,0.21054678, 0.0069597 , 0.22877093],
 [0.16764519, 0.16897033, 0.25848053 ,0.18674186, 0.09846462, 0.11969746],
 [0.28655211, 0.02473762, 0.27387452 ,0.27546459, 0.08641467, 0.05295649],
 [0.11353057, 0.13090863, 0.20522811 ,0.15786368, 0.35574052, 0.03672849],
 [0.10510461, 0.08116927, 0.3286373  ,0.12745369, 0.23464272, 0.12299241],
 [0.09757735, 0.06774952, 0.40286261 ,0.08481828, 0.1206645 , 0.22632773],
 [0.24899344, 0.02944918, 0.25413459 ,0.02914503, 0.29614373, 0.14213403],
 [0.35350682, 0.21890411, 0.26755234 ,0.01418274, 0.10235276, 0.04350123],
 [0.15555757, 0.06236572, 0.16703133 ,0.21760554, 0.03369562, 0.36374421],
 [0.1917808,  0.08982788, 0.17710673 ,0.03179658, 0.19494387 ,0.31454414]])
'''